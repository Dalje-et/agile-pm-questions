{"version":3,"sources":["questions.js","App.js","serviceWorker.js","index.js"],"names":["App","props","state","displayedAnswer","filterQuestions","onFilterChange","bind","filter","questionCards","questions","forEach","question","includes","push","Grid","item","xs","sm","Card","style","animation","animations","popIn","backgroundColor","maxWidth","margin","CardContent","Typography","color","gutterBottom","lineHeight","role","aria-label","answers","text","event","this","setState","currentTarget","value","classes","className","root","container","spacing","TextField","id","label","variant","onChange","fullWidth","React","Component","withStyles","theme","height","width","position","top","left","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","rel","href","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0UAAe,GACb,CACE,SAAY,mBACZ,QAAW,CACT,CACE,KAAQ,UACR,SAAW,GAEb,CACE,KAAQ,QACR,SAAW,GAEb,CACE,KAAQ,OACR,SAAW,GAEb,CACE,KAAQ,WACR,SAAW,KAIjB,CACE,SAAY,gBACZ,QAAW,CACT,CACE,KAAQ,MACR,SAAW,GAEb,CACE,KAAQ,KACR,SAAW,GAEb,CACE,KAAQ,KACR,SAAW,GAEb,CACE,KAAQ,MACR,SAAW,MCZbA,E,kDAEJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,gBAAiB,EAAKC,gBAAgB,KAGxC,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBANL,E,4DASHC,GACd,IAAMC,EAAgB,GA0BtB,OAxBAC,EAAUC,SAAQ,SAAAC,IACD,KAAXJ,GAAiBI,EAASA,SAASC,SAASL,KAC9CC,EAAcK,KAEV,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GACrB,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAACC,UAAWC,aAAWC,MAAOC,gBAAiB,2BAA4BC,SAAU,MAAOC,OAAQ,WAC/G,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,cAAcC,cAAY,GAC1C,2BAAIlB,EAASA,WAEf,uBAAGQ,MAAO,CAACW,WAAY,QACrB,0BAAMC,KAAK,MAAMC,aAAY,WAA7B,UADF,IACmD,8BAAOrB,EAASsB,QAAQ,GAAGC,MAAY,6BACxF,0BAAMH,KAAK,MAAMC,aAAY,aAA7B,UAFF,IAEqD,8BAAOrB,EAASsB,QAAQ,GAAGC,MAAY,6BAC1F,0BAAMH,KAAK,MAAMC,aAAY,aAA7B,UAHF,IAGqD,8BAAOrB,EAASsB,QAAQ,GAAGC,MAAY,6BAC1F,0BAAMH,KAAK,MAAMC,aAAY,aAA7B,UAJF,IAIqD,8BAAOrB,EAASsB,QAAQ,GAAGC,MAAY,qCAUnG1B,I,qCAGM2B,GACbC,KAAKC,SAAS,CACZlC,gBAAiBiC,KAAKhC,gBAAgB+B,EAAMG,cAAcC,W,+BAIpD,IACAC,EAAYJ,KAAKnC,MAAjBuC,QAER,OACE,yBAAKC,UAAWD,EAAQE,MACtB,kBAAC5B,EAAA,EAAD,CAAM6B,WAAS,EAACF,UAAWD,EAAQG,UAAWC,QAAS,GACrD,kBAAC9B,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IACb,kBAAC6B,EAAA,EAAD,CACEC,GAAG,eACHC,MAAM,UACNC,QAAQ,WACRC,SAAUb,KAAK/B,eACf6C,WAAS,KAGZd,KAAKlC,MAAMC,sB,GA9DJgD,IAAMC,WAqETC,eAtFG,SAAAC,GAAK,MAAK,CAC1BZ,KAAM,CACJa,OAAQ,OACRC,MAAO,OACPC,SAAU,WACVC,IAAK,IACLC,KAAM,KAERhB,UAAW,CACTa,MAAO,MACPhC,SAAU,QACVC,OAAQ,SACRmC,UAAW,YA0EAP,CAAuBrD,G,MCpFlB6D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,0BAAMC,IAAI,aAAaC,KAAK,4DAC5B,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDuHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7bd3da11.chunk.js","sourcesContent":["export default [\n  {\n    \"question\": \"What is my name?\",\n    \"answers\": [\n      {\n        \"text\": \"Daljeet\",\n        \"correct\": true\n      },\n      {\n        \"text\": \"Abodi\",\n        \"correct\": false\n      },\n      {\n        \"text\": \"Test\",\n        \"correct\": false\n      },\n      {\n        \"text\": \"Uhlalala\",\n        \"correct\": false\n      }\n    ]\n  },\n  {\n    \"question\": \"How old am I?\",\n    \"answers\": [\n      {\n        \"text\": \"100\",\n        \"correct\": true\n      },\n      {\n        \"text\": \"93\",\n        \"correct\": false\n      },\n      {\n        \"text\": \"12\",\n        \"correct\": false\n      },\n      {\n        \"text\": \"123\",\n        \"correct\": false\n      }\n    ]\n  }\n]\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from \"@material-ui/core/TextField\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport {animations} from 'react-animation'\nimport questions from \"./questions\";\n\nconst useStyles = theme => ({\n  root: {\n    height: \"100%\",\n    width: \"100%\",\n    position: \"absolute\",\n    top: \"0\",\n    left: \"0\"\n  },\n  container: {\n    width: \"95%\",\n    maxWidth: \"800px\",\n    margin: \"0 auto\",\n    marginTop: \"100px\",\n  }\n});\n\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayedAnswer: this.filterQuestions(\"\")\n    }\n\n    this.onFilterChange = this.onFilterChange.bind(this);\n  }\n\n  filterQuestions(filter) {\n    const questionCards = [];\n\n    questions.forEach(question => {\n      if (filter === \"\" || question.question.includes(filter)) {\n        questionCards.push(\n          (\n            <Grid item xs={12} sm={6}>\n              <Card style={{animation: animations.popIn, backgroundColor: \"rgba(253, 247, 237, 0.4)\", maxWidth: \"95%\", margin: \"0 auto\"}}>\n                <CardContent>\n                  <Typography color=\"textPrimary\" gutterBottom>\n                    <b>{question.question}</b>\n                  </Typography>\n                  <p style={{lineHeight: \"1.5\"}}>\n                    <span role=\"img\" aria-label={\"correct\"}>✅</span> <span>{question.answers[0].text}</span><br/>\n                    <span role=\"img\" aria-label={\"incorrect\"}>❌</span> <span>{question.answers[1].text}</span><br/>\n                    <span role=\"img\" aria-label={\"incorrect\"}>❌</span> <span>{question.answers[2].text}</span><br/>\n                    <span role=\"img\" aria-label={\"incorrect\"}>❌</span> <span>{question.answers[3].text}</span><br/>\n                  </p>\n                </CardContent>\n              </Card>\n            </Grid>\n          )\n        );\n      }\n    });\n\n    return questionCards;\n  }\n\n  onFilterChange(event) {\n    this.setState({\n      displayedAnswer: this.filterQuestions(event.currentTarget.value)\n    });\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div className={classes.root}>\n        <Grid container className={classes.container} spacing={3}>\n          <Grid item xs={12}>\n            <TextField\n              id=\"filled-basic\"\n              label=\"Keyword\"\n              variant=\"outlined\"\n              onChange={this.onFilterChange}\n              fullWidth/>\n          </Grid>\n\n          {this.state.displayedAnswer}\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(useStyles) (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'fontsource-roboto';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"/>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}