{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","maxWidth","margin","marginTop","paper","padding","spacing","textAlign","color","palette","text","secondary","App","classes","bull","className","bullet","style","animation","animations","popIn","Grid","container","item","xs","TextField","id","label","variant","fullWidth","Card","CardContent","Typography","gutterBottom","component","green","red","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","rel","href","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.00792f8e.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from \"@material-ui/core/TextField\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport green from \"@material-ui/core/colors/green\";\nimport { animations } from 'react-animation'\nimport red from \"@material-ui/core/colors/red\";\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: \"800px\",\n    margin: \"0 auto\",\n    marginTop: \"200px\"\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const bull = <span className={classes.bullet}>â€¢</span>;\n\n  const style = {\n    animation: animations.popIn\n  }\n\n  return (\n      <div className={classes.root}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <TextField style={style} id=\"filled-basic\" label=\"Keyword\" variant=\"outlined\" fullWidth />\n          </Grid>\n          <Grid item xs={6}>\n            <Card>\n              <CardContent>\n                <Typography color=\"textPrimary\" gutterBottom>\n                  Question\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                  {bull}<span style={{ color: green[500] }}>  well meaning and kindly.</span> <br />\n                  {bull}<span style={{ color: red[500] }}>  well meaning and kindly.</span> <br />\n                  {bull}<span style={{ color: red[500] }}>  well meaning and kindly.</span> <br />\n                  {bull}<span style={{ color: red[500] }}>  well meaning and kindly.</span> <br />\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={6}>\n            <Card>\n              <CardContent>\n                <Typography color=\"textPrimary\" gutterBottom>\n                  Question\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                  {bull}<span style={{ color: green[500] }}>  well meaning and kindly.</span> <br />\n                  {bull}<span style={{ color: red[500] }}>  well meaning and kindly.</span> <br />\n                  {bull}<span style={{ color: red[500] }}>  well meaning and kindly.</span> <br />\n                  {bull}<span style={{ color: red[500] }}>  well meaning and kindly.</span> <br />\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={6}>\n            <Card>\n              <CardContent>\n                <Typography color=\"textPrimary\" gutterBottom>\n                  Question\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                  {bull}<span style={{ color: green[500] }}>  well meaning and kindly.</span> <br />\n                  {bull}<span style={{ color: red[500] }}>  well meaning  well meaning  well meaning  well meaning  well meaning  well meaning  well meaning  well meaning and kindly.</span> <br />\n                  {bull}<span style={{ color: red[500] }}>  well meaning and kindly.</span> <br />\n                  {bull}<span style={{ color: red[500] }}>  well meaning and kindly.</span> <br />\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={6}>\n            <Card>\n              <CardContent>\n                <Typography color=\"textPrimary\" gutterBottom>\n                  Question\n                </Typography>\n                <Typography variant=\"body2\" component=\"p\">\n                  {bull}<span style={{ color: green[500] }}>  well meaning and kindly.</span> <br />\n                  {bull}<span style={{ color: red[500] }}>  well meaning and kindly.</span> <br />\n                  {bull}<span style={{ color: red[500] }}>  well meaning and kindly.</span> <br />\n                  {bull}<span style={{ color: red[500] }}>  well meaning and kindly.</span> <br />\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n      </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"/>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}